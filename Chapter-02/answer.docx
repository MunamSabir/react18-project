 1:
 What is `NPM`?
 
 It’s a popular package manager for the JavaScript programming language, and it's 
 particularly associated with Node.js, which is a JavaScript runtime that allows for 
 the execution of JavaScript code server-side.

 Package Repository: NPM provides access to a large repository of open-source packages 
 (called modules) that developers have shared for the community's use.
 Package Management: NPM allows developers to manage and control packages within their 
 projects. Developers can specify which package versions they want to install, update 
 packages easily, and handle package dependencies

 This is how we install packages using command line
 npm install -g <package-name>

2:
What is `Parcel/Webpack`? Why do we need it?

 Parcel and Webpack are both popular web application bundlers. These tools help developers to 
 package and optimize various web resources and assets, like JavaScript, CSS, HTML, and images, 
 into bundles that can be easily deployed and served to end-users.

Parcel Key Features:
 Zero Configuration: Parcel requires minimal setup and configuration to get started.
 Hot Module Replacement (HMR): Allows for live updating of modules during development without refreshing the entire page.
 Code Splitting: Splits code into smaller chunks to optimize load times.
 Support for Various Assets: Handles JavaScript, CSS, HTML, and more, even allowing for the import of non-JavaScript assets into JavaScript files.

Webpack Key Features:
 Modularity: Supports modular programming and helps in bundling various module formats.
 Loaders: Through loaders, Webpack can process and bundle all types of files, not just JavaScript.
 Plugins: Offers a wide range of plugins for extending its functionality.
 Code Splitting: Efficiently splits code for better performance and loading efficiency.
 Dev Server: Provides a development server with hot module replacement capability.

 We need them for performance optimization like minification, compression, Tree Shaking and Hot Module Replacement.

3:
What is .parcel-cache ?

 .parcel-cache is a directory that is automatically generated by Parcel when you run the build process or start a development server using the Parcel bundler. 
 The .parcel-cache directory is used by Parcel to store intermediate files and cache data, which helps improve the build performance by reusing previous build 
 results where possible.


4:
What is `npx` ?

 npx is a package runner tool that comes with Node.js and npm (Node Package Manager). It was introduced in npm version 5.2.0 and offers various 
 benefits in executing binaries from Node modules as well as packages that weren't previously installed.


5:
What is difference between `dependencies` vs `devDependencies`?

 In a Node.js project, dependencies are managed in a package.json file. Within this file, you will find two common sections related to 
 dependencies: dependencies and devDependencies.

6:
What is Tree Shaking?

 Tree shaking is a term commonly used in the context of JavaScript and web development, referring to a dead code elimination strategy used by 
 JavaScript bundlers like Webpack and Rollup.

 The main goal of tree shaking is to remove unused or "dead" code from the final output (bundle) of a JavaScript application to ensure that 
 the production build is as lightweight and efficient as possible.

7:
What is Hot Module Replacement?

 Hot Module Replacement (HMR) is a powerful feature offered by various development tools such as Webpack, Parcel, and others, predominantly 
 used in the front-end development workflow. HMR allows developers to automatically update, add, or remove modules in a running application 
 without requiring a full page reload, thus preserving the application's state.

 Watching Files: The development tool watches for changes in the source files. This includes JavaScript, CSS, HTML, and even images in some cases.

 Updating Modules: When a change is detected, the updated module is sent to the browser. The HMR runtime in the browser then replaces the old module 
 with the new one.

 Preserving State: Since HMR only replaces the modified modules, the state of the application is preserved. For instance, if you're working on a specific 
 component in a React application, you can make changes to it without losing the component’s state, enhancing the development experience.



8:
 What is `.gitignore`? What should we add and not add into it?

 .gitignore is a file used in a Git repository to specify which files or directories should be excluded from version control. 
 This helps in maintaining a clean repository by avoiding the tracking of unnecessary or sensitive files, such as temporary files, 
 build artifacts, or configuration files with sensitive information.
 
 What to Add to .gitignore 
  node_modules/
 .env, config.json
  dist/, build/, out/.
 .DS_Store, *.tmp, *.log

 What Not to Add to .gitignore
 .js, .css, .html
 package.json, webpack.config.js.

9:
What is the difference between `package.json` and `package-lock.json`?

package.json and package-lock.json are both integral files in Node.js projects, mainly when using npm 
to manage dependencies. They serve different but complementary purposes in managing a project’s dependencies

package.json acts as a manifest file for the project, containing metadata such as the project's name, version, description, scripts, and dependencies.
package-lock.json locks the versions of all dependencies and their sub-dependencies, ensuring that everyone working on the project uses the exact same versions.


10:
Why should I not modify `package-lock.json`?

package-lock.json file manually is not recommended for several reasons:
The package-lock.json file is automatically generated and maintained by npm. It gets updated automatically whenever you add, 
update, or remove dependencies using npm commands (e.g., npm install, npm update).

package-lock.json includes integrity hashes for validating the authenticity and integrity of the packages. Manually modifying 
these values can compromise the security measures in place and make the project susceptible to malicious attacks.


11:
 What is `node_modules` ? Is it a good idea to push that on git?

 node_modules is a directory that is automatically created when you install dependencies in a Node.js project using package managers like npm or Yarn. 
 This directory contains the source code of all the packages (libraries or dependencies) that you've installed, as well as the dependencies of those packages

12:
 What is the `dist` folder?

 The dist folder, short for "distribution," is a common convention in web development and software engineering. It is where the final, production-ready build 
 of a project resides after a build process. The contents of the dist folder are the files that will be deployed to a live server for users to access.

13:
 What is `browserlists`?

 browserslist is a configuration that is used to specify the target browsers and environments for various front-end development tools, ensuring that the 
 generated code is optimized and compatible with the specified browsers or environments. It provides a way to share a single target environment configuration 
 between different front-end tools, such as Autoprefixer, Babel, ESLint, and stylelint, among others.

14:
Read about dif bundlers: vite, webpack, parcel?
1. Vite
Development Speed: Vite offers exceptionally fast development start-up times. It utilizes native ES modules in the browser, allowing code to be instantly imported during development without bundling.

Built-In Features: Vite comes with built-in features like hot module replacement and ES module imports during development.

Rich Plugin Architecture: Vite is built on top of Rollup, a popular JavaScript bundler, enabling it to leverage the rich plugin ecosystem of Rollup for production bundling.

Frameworks: It has special templates and handling for Vue and React, but it is also adaptable to other frameworks like Svelte or vanilla JS.

Production Ready: For production, Vite bundles the code optimizing it for performance using Rollup.

2. Webpack
Modularity: Webpack is renowned for its flexibility and modularity. It allows for the handling of various assets such as JavaScript, CSS, images, and fonts as modules.

Loaders and Plugins: Through loaders and plugins, Webpack can be extensively configured to handle a wide variety of tasks and optimizations.

Code Splitting: It has robust code-splitting capabilities, allowing for the creation of smaller bundles which can be loaded on-demand.

Dev Server: Webpack dev server offers a development server environment with hot module replacement functionality.

Widely Adopted: Webpack has been widely adopted in the industry, and many tools and frameworks have built-in Webpack configurations.

3. Parcel
Zero Configuration: Parcel prides itself on being a zero-configuration bundler, meaning that it requires minimal setup to work out of the box.

Fast Build Times: Utilizes multicore processing to offer fast build times.

Built-In Transformers: Comes with built-in transformers for various file types, reducing the need for plugins and loaders.

Hot Module Replacement: Parcel also includes hot module replacement for faster development.

Rich Asset Support: It has broad support for various file types and languages, making it adaptable for various projects.


15:
 Read about: ^ - caret and ~ - tilda?
 The caret (^) and tilde (~) symbols are used in a project's package.json file to specify version ranges for dependencies in a Node.js project.

Caret (^):
When a version number is prefixed with a caret (^), it allows for changes that do not modify the left-most non-zero digit in the specified version.
For example, if a dependency is specified as "^1.2.3", it means that any version that does not modify the 1 (major version) is acceptable. 
This means any version from 1.2.3 to 1.999.999 is valid.

Tilde (~):
When a version number is prefixed with a tilde (~), it allows for changes that only modify the version at the patch level.
For example, if a dependency is specified as "~1.2.3", it means any version that keeps the 1.2 the same but allows changes 
in the patch version is acceptable. So, any version from 1.2.3 to 1.2.999 is valid.



16:
Read about Script types in html (MDN Docs)?

The <script> tag in HTML is used to embed or reference executable code, usually JavaScript. The type of script can be specified using the type attribute. 
Here are some script types you might encounter in HTML:

1: JavaScript (text/javascript)
Default Type: If no type attribute is present, the script is treated as JavaScript.

Explicit Type: The type can explicitly be set to "text/javascript".

2: Module (module)
ES Modules: You can use this type to work with JavaScript ES modules. It allows the use of import and export statements.

Usage: The type is set to "module" to indicate that the script should be treated as an ES module.

3: JSON (application/json)
Not Executable: This type is used for embedding non-executable JSON data in HTML documents.

Usage: Often used in combination with other JavaScript to consume the JSON data.





